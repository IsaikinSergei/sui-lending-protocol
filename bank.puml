@startuml

package Bank {

  class Bank {
    -bankCoinSuppy: Suppy
    -cashBalance: Balance
    -reserveBalance: Balance
    -debtAmount: u64

    #repay(balance): void
    #borrow(): Balance
    #mint(Coin): BankCoin
    #redeem(BankCoin): Coin
  }

  class BankStat {
    -debt: u64
    -cash: u64
    -reserve: u64
  }

  class BankStats {
    -stats: Table<TypeName, BankStat>
    +update(debt: u64, cash: u64, reserve: u64): void
    +get(): BankStat
  }

  BankStats <|-- BankStat

}

package Postion {
  class Position {
    -id: ID
    -balances: BalanceBag
    -collaterals: TokenStats
    -debts: TokenStats
    -borrowIndexes: Table<TypeName, Exp>
    #new(): Position, PositionKey
    #add_collateral<T>(balance: Balance<T>): void
    #remove_collateral<T>(key: &PositionKey, amount: u64, ...): Balance<T>
    #add_debt<T>(key: &PositionKey, ...): void
    #remove_debt<T>(amount: u64, ...): void
    +debts(): &TokenStats
    +collaterals(): &TokenStats
    -accue_interest_(...): void
  }

  class PositionKey {
    -to: ID
    +key_to(): ID
  }
  note right of PositionKey::to
    This is the ID of relaed position
    It's used to identify the ownership of Position.
    Use will need to pass the PositionKey to operaton on Position.
  end note

  Position <.. PositionKey

  class TokenStats {
    -stats: Table<TokenStat>
    +increase(typeName: TypeName, amount: u64): void
    -decrease(typeName: TypeName, amount: u64): void
  }
  Position *-- TokenStats

  class TokenStat {
    -type: TypeName
    -amount: u64
    +token_type(): TypeName
    +token_amount(): u64
  }

  TokenStats *-- TokenStat
}

class Evaluator {
  +max_borrow_amount(): u64
  +max_withdraw_amount(): u64
  +max_liquidate_amount(): u64
}

class CollateralConfig {
  +collateral_factor(typeName: TypeName): Exp
}

class BorrowIndex {
  refresh_and_get(typeName: TypeName): Exp
}

class TimeOracle {}
class InterestConfig {}

BorrowIndex <.. BankStats
BorrowIndex <.. TimeOracle
BorrowIndex <.. InterestConfig

Evaluator <.. CollateralConfig
Evaluator <.. Position
Evaluator <.. Bank

class User {
  repay()
}

User <.. Position
User <.. Bank
User <.. BorrowIndex
User <.. BankStats
User <.. TimeOracle
User <.. InterestConfig

@enduml
